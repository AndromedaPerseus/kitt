package service

import (
	"sync/atomic"
	"time"

	lksdk "github.com/livekit/server-sdk-go"
	"github.com/pion/webrtc/v3"
)

var (
	OpusSilenceFrame = []byte{
		0xf8, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
)

type GPTTrack struct {
	sampleTrack       *lksdk.LocalSampleTrack
	activeEmptyPacket atomic.Bool
}

func NewGPTTrack() (*GPTTrack, error) {
	track, err := lksdk.NewLocalSampleTrack(webrtc.RTPCodecCapability{MimeType: webrtc.MimeTypeOpus})
	if err != nil {
		return nil, err
	}

	return &GPTTrack{
		sampleTrack: track,
	}, nil
}

func (t *GPTTrack) Start() {
	for {
		time.Sleep(20 * time.Millisecond)
		if !t.sampleTrack.IsBound() {
			continue
		}

		// Send empty OpusPacket
		if t.activeEmptyPacket.Load() {
			
		}
	}
}

func (t *GPTTrack) Stop() {

}
